//1. find Largest Element in array 
class Komal {
    public int largestElement(int[] nums) {
                // assume first element is max
        int max = nums[0];
        
        // traverse the array
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > max) {
                max = nums[i];
            }
        }  
        return max;
    }
}


// 2.Second Largest Element
class Komal{
   public int secondLargestElement(int[] arr){
     if(arr.length<2) return -1;
     int Largest

   }
}

//3.Check if the array is sorted
class Solution {
    public boolean isSorted(ArrayList<Integer> nums) {   
        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums.get(i) > nums.get(i + 1)) {
                return false; // not sorted
            }
        }
        return true; // sorted
    }
}


//4.Remove duplicates from sorted array
class Solution {
    public int removeDuplicates(int[] nums) {
          if (nums.length == 0) return 0;

        int i = 0; // pointer for last unique element
        for (int j = 1; j < nums.length; j++) {
            if (nums[j] != nums[i]) {  // found a new unique element
                i++;
                nums[i] = nums[j];    // move it to the next position
            }
        }
        return i + 1; // count of unique elements  
    }
}


//5.Left Rotate an array by one place
class Solution {
    public void rotateArrayByOne(int[] nums) {
        if (nums.length == 0) return;

        int first = nums[0]; // store first element
        for (int i = 0; i < nums.length - 1; i++) {
            nums[i] = nums[i + 1]; // shift left
        }
        nums[nums.length - 1] = first; // put first at the end
    }
}
