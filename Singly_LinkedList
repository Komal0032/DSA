//1.Inserting a node in LinkedList
class Solution {
    public ListNode insertAtHead(ListNode head, int X) {
        // Step 1: Create a new node with value X
        ListNode newNode = new ListNode(X);
        
        // Step 2: Point new node's next to the current head
        newNode.next = head;
        
        // Step 3: Update head to newNode
        head = newNode;
        
        // Step 4: Return the new head
        return head;
    }
}


//2.Deleting a node in LinkedList

class Solution {
    public ListNode deleteHead(ListNode head) {


        // If the list is empty, return null
        if (head == null) {
            return null;
        }
        
        // Move the head pointer to the next node
        head = head.next;
        
        // Return the new head
        return head;
    }
}


//3.Find the length of the linkedlist
class Solution {
    public int getLength(ListNode head) {
        // Your code goes here
          int count = 0;
        ListNode temp = head;

        // Traverse the linked list
        while (temp != null) {
            count++;
            temp = temp.next;
        }

        // Return the total count
        return count;
    }
}
    
